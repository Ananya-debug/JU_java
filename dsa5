import java.util.Scanner;

// Node class for linked list
class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

// Stack class using linked list
class Stack {
    private Node top;

    public Stack() {
        top = null;
    }

    public void push(int value) {
        Node newNode = new Node(value);
        newNode.next = top;
        top = newNode;
    }

    public int pop() {
        if (isEmpty()) {
            System.out.println("Stack underflow!");
            return -1;
        }
        int popped = top.data;
        top = top.next;
        return popped;
    }

    public boolean isEmpty() {
        return top == null;
    }

    public void display() {
        if (isEmpty()) {
            System.out.println("Stack is empty!");
            return;
        }
        Node current = top;
        System.out.print("Stack elements: ");
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
}

public class MultiStack {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of stacks: ");
        int n = sc.nextInt();

        Stack[] stacks = new Stack[n];
        for (int i = 0; i < n; i++) {
            stacks[i] = new Stack();
        }

        while (true) {
            System.out.println("\n1. Push\n2. Pop\n3. Display\n4. Exit");
            System.out.print("Enter choice: ");
            int choice = sc.nextInt();

            if (choice == 4) break;

            System.out.print("Enter stack number (0 to " + (n - 1) + "): ");
            int stackNum = sc.nextInt();
            if (stackNum < 0 || stackNum >= n) {
                System.out.println("Invalid stack number!");
                continue;
            }

            switch (choice) {
                case 1:
                    System.out.print("Enter value to push: ");
                    int value = sc.nextInt();
                    stacks[stackNum].push(value);
                    break;
                case 2:
                    int popped = stacks[stackNum].pop();
                    if (popped != -1)
                        System.out.println("Popped: " + popped);
                    break;
                case 3:
                    stacks[stackNum].display();
                    break;
                default:
                    System.out.println("Invalid choice!");
            }
        }

        sc.close();
    }
}
