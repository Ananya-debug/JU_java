public class MultiQueue {
    private int[][] queues;
    private int[] fronts;
    private int[] rears;
    private int size, capacity;

    public MultiQueue(int n, int capacity) {
        this.capacity = capacity;
        this.size = n;
        queues = new int[n][capacity];
        fronts = new int[n];
        rears = new int[n];
        for (int i = 0; i < n; i++) {
            fronts[i] = rears[i] = -1;
        }
    }

    public void enqueue(int queueNumber, int value) {
        if (rears[queueNumber] == capacity - 1) {
            System.out.println("Queue " + queueNumber + " is full");
            return;
        }
        if (fronts[queueNumber] == -1) fronts[queueNumber] = 0;
        queues[queueNumber][++rears[queueNumber]] = value;
    }

    public void dequeue(int queueNumber) {
        if (fronts[queueNumber] == -1 || fronts[queueNumber] > rears[queueNumber]) {
            System.out.println("Queue " + queueNumber + " is empty");
            return;
        }
        System.out.println("Dequeued from Queue " + queueNumber + ": " + queues[queueNumber][fronts[queueNumber]++]);
    }

    public void display(int queueNumber) {
        if (fronts[queueNumber] == -1 || fronts[queueNumber] > rears[queueNumber]) {
            System.out.println("Queue " + queueNumber + " is empty");
            return;
        }
        System.out.print("Queue " + queueNumber + ": ");
        for (int i = fronts[queueNumber]; i <= rears[queueNumber]; i++) {
            System.out.print(queues[queueNumber][i] + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        MultiQueue mq = new MultiQueue(3, 5); // 3 queues, each of size 5
        mq.enqueue(0, 10);
        mq.enqueue(1, 20);
        mq.enqueue(2, 30);
        mq.display(0);
        mq.display(1);
        mq.display(2);
        mq.dequeue(1);
        mq.display(1);
    }
}
