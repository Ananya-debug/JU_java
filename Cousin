import java.util.*;

class TreeNode {
    int val;
    TreeNode left, right;

    TreeNode(int val) {
        this.val = val;
    }
}

public class Cousins {
    private static int preorderIndex = 0;

    public static TreeNode buildTree(int[] preorder, int[] inorder, Map<Integer, Integer> inorderMap) {
        return buildTreeHelper(preorder, 0, inorder.length - 1, inorderMap);
    }

    private static TreeNode buildTreeHelper(int[] preorder, int inStart, int inEnd, Map<Integer, Integer> inorderMap) {
        if (inStart > inEnd) return null;

        int rootVal = preorder[preorderIndex++];
        TreeNode root = new TreeNode(rootVal);

        int inIndex = inorderMap.get(rootVal);

        root.left = buildTreeHelper(preorder, inStart, inIndex - 1, inorderMap);
        root.right = buildTreeHelper(preorder, inIndex + 1, inEnd, inorderMap);

        return root;
    }


    public static void printCousins(TreeNode root) {
        if (root == null) return;

        Map<Integer, List<Integer>> levelMap = new HashMap<>();
        Queue<TreeNode> queue = new LinkedList<>();
        Queue<Integer> levels = new LinkedList<>();

        queue.add(root);
        levels.add(0);

        while (!queue.isEmpty()) {
            TreeNode current = queue.poll();
            int level = levels.poll();

            levelMap.putIfAbsent(level, new ArrayList<>());
            levelMap.get(level).add(current.val);

            if (current.left != null) {
                queue.add(current.left);
                levels.add(level + 1);
            }

            if (current.right != null) {
                queue.add(current.right);
                levels.add(level + 1);
            }
        }

        
        for (Map.Entry<Integer, List<Integer>> entry : levelMap.entrySet()) {
            List<Integer> cousins = entry.getValue();
            if (cousins.size() > 1) {
                System.out.println("Cousins at level " + entry.getKey() + ": " + cousins);
            }
        }
    }

    public static void main(String[] args) {
        
        int[] preorder = {1, 2, 4, 5, 3, 6, 7};

        int[] inorder  = {4, 2, 5, 1, 6, 3, 7};

        
        Map<Integer, Integer> inorderMap = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            inorderMap.put(inorder[i], i);
        }

       
        TreeNode root = buildTree(preorder, inorder, inorderMap);

        
        printCousins(root);
    }
}
